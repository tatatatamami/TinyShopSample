@page "/products"
@using DataEntities
@using Store.Services
@inject ProductService ProductService
@inject IConfiguration Configuration
@attribute [StreamRendering(true)]

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<p>Here are some of our amazing outdoor products that you can purchase.</p>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>
                    <button class="btn btn-link p-0 text-start fw-bold text-decoration-none" @onclick="@(() => SortBy("name"))">
                        Name
                        @if (currentSortBy == "name")
                        {
                            <span>@(currentSortDirection == "asc" ? "▲" : "▼")</span>
                        }
                    </button>
                </th>
                <th>
                    <button class="btn btn-link p-0 text-start fw-bold text-decoration-none" @onclick="@(() => SortBy("price"))">
                        Price
                        @if (currentSortBy == "price")
                        {
                            <span>@(currentSortDirection == "asc" ? "▲" : "▼")</span>
                        }
                    </button>
                </th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td><img height="80" width="80" src="https://raw.githubusercontent.com/MicrosoftDocs/mslearn-dotnet-cloudnative/main/dotnet-docker/Products/wwwroot/images/@product.ImageUrl" /></td>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.Description</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Product>? products;
    private string imagePrefix = string.Empty;
    private string? currentSortBy = "name";
    private string currentSortDirection = "asc";

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);
        imagePrefix = Configuration["ImagePrefix"]!;
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await ProductService.GetProducts(currentSortBy, currentSortDirection);
    }

    private async Task SortBy(string columnName)
    {
        if (currentSortBy == columnName)
        {
            // Toggle direction if same column
            currentSortDirection = currentSortDirection == "asc" ? "desc" : "asc";
        }
        else
        {
            // New column, default to ascending
            currentSortBy = columnName;
            currentSortDirection = "asc";
        }

        await LoadProducts();
    }
}
